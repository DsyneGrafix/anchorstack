// src/components/VaultTileV2.tsx - Enhanced Vault Tile Component
import React from 'react'
import { ExternalLink, Download, Crown, Gift, Award, Star, Eye } from 'lucide-react'
import { Card, CardContent } from '@/components/ui/Card'

interface VaultProduct {
  id: string;
  title: string;
  description: string;
  tier: string;
  value: string;
  category: string;
  downloadUrl: string;
  promoUrl?: string;
  autoGenerated?: boolean;
}

interface VaultTileProps {
  product: VaultProduct;
  onClick?: () => void;
  showPreview?: boolean;
}

const tierConfig = {
  freebies: {
    icon: Gift,
    bgColor: 'bg-green-50',
    borderColor: 'border-green-200',
    textColor: 'text-green-800',
    badgeColor: 'bg-green-500',
    label: 'üéÅ FREE',
    gradient: 'from-green-400 to-green-600'
  },
  bronze: {
    icon: Award,
    bgColor: 'bg-orange-50',
    borderColor: 'border-orange-200',
    textColor: 'text-orange-800',
    badgeColor: 'bg-orange-500',
    label: 'ü•â BRONZE',
    gradient: 'from-orange-400 to-orange-600'
  },
  silver: {
    icon: Star,
    bgColor: 'bg-blue-50',
    borderColor: 'border-blue-200',
    textColor: 'text-blue-800',
    badgeColor: 'bg-blue-500',
    label: 'ü•à SILVER',
    gradient: 'from-blue-400 to-blue-600'
  },
  gold: {
    icon: Crown,
    bgColor: 'bg-yellow-50',
    borderColor: 'border-yellow-200',
    textColor: 'text-yellow-800',
    badgeColor: 'bg-yellow-500',
    label: 'ü•á GOLD',
    gradient: 'from-yellow-400 to-yellow-600'
  },
  platinum: {
    icon: Crown,
    bgColor: 'bg-purple-50',
    borderColor: 'border-purple-200',
    textColor: 'text-purple-800',
    badgeColor: 'bg-purple-500',
    label: 'üíé PLATINUM',
    gradient: 'from-purple-400 to-purple-600'
  }
}

export const VaultTileV2: React.FC<VaultTileProps> = ({ 
  product, 
  onClick, 
  showPreview = false 
}) => {
  const config = tierConfig[product.tier.toLowerCase()] || tierConfig.bronze
  const IconComponent = config.icon

  const handleMainClick = () => {
    if (onClick) {
      onClick()
    } else if (product.promoUrl) {
      window.open(product.promoUrl, '_blank')
    } else {
      window.open(product.downloadUrl, '_blank')
    }
  }

  const handleDirectDownload = (e: React.MouseEvent) => {
    e.stopPropagation()
    window.open(product.downloadUrl, '_blank')
  }

  const handlePreview = (e: React.MouseEvent) => {
    e.stopPropagation()
    if (product.promoUrl) {
      window.open(product.promoUrl, '_blank')
    }
  }

  return (
    <Card 
      className={`
        ${config.bgColor} ${config.borderColor} 
        cursor-pointer transition-all duration-300 
        hover:shadow-xl hover:scale-105 
        group relative overflow-hidden
        border-2
      `}
      onClick={handleMainClick}
    >
      {/* Animated Background Gradient */}
      <div className={`
        absolute inset-0 bg-gradient-to-br ${config.gradient} 
        opacity-0 group-hover:opacity-10 transition-opacity duration-300
      `} />

      {/* Tier Badge */}
      <div className={`
        absolute top-3 right-3 z-10
        ${config.badgeColor} text-white
        px-2 py-1 rounded-full text-xs font-bold
        flex items-center space-x-1
        shadow-lg
      `}>
        <IconComponent className="w-3 h-3" />
        <span className="hidden sm:inline">{config.label}</span>
      </div>

      {/* Auto-Generated Badge */}
      {product.autoGenerated && (
        <div className="absolute top-3 left-3 z-10 bg-blue-500 text-white px-2 py-1 rounded-full text-xs font-bold">
          ‚ú® NEW
        </div>
      )}

      <CardContent className="p-6 pt-12">
        <div className="space-y-4">
          {/* Title and Category */}
          <div>
            <h3 className={`font-bold text-lg ${config.textColor} group-hover:text-opacity-90 line-clamp-2`}>
              {product.title}
            </h3>
            <span className={`text-xs font-medium ${config.textColor} opacity-70`}>
              {product.category}
            </span>
          </div>
          
          {/* Description */}
          <p className="text-gray-600 text-sm leading-relaxed line-clamp-3">
            {product.description}
          </p>
          
          {/* Value */}
          <div className={`text-lg font-bold ${config.textColor}`}>
            {product.value}
          </div>
          
          {/* Action Buttons */}
          <div className="flex items-center justify-between pt-2 space-x-2">
            {/* Preview Button (if promo page exists) */}
            {product.promoUrl && showPreview && (
              <button
                onClick={handlePreview}
                className={`
                  flex items-center space-x-1 px-3 py-1 rounded-md text-xs font-medium
                  ${config.textColor} bg-white bg-opacity-50 hover:bg-opacity-80
                  transition-all duration-200
                `}
              >
                <Eye className="w-3 h-3" />
                <span>Preview</span>
              </button>
            )}
            
            {/* Download Button */}
            <button
              onClick={handleDirectDownload}
              className={`
                flex items-center space-x-1 px-3 py-1 rounded-md text-xs font-medium
                ${config.badgeColor} text-white hover:opacity-90
                transition-all duration-200 ml-auto
              `}
            >
              <Download className="w-3 h-3" />
              <span>Get</span>
            </button>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

// src/components/VaultGrid.tsx - Main Vault Display Component
import React, { useState, useEffect } from 'react'
import { Search, Filter, Grid, List } from 'lucide-react'
import { VaultTileV2 } from './VaultTileV2'
import { Card, CardContent } from '@/components/ui/Card'
import { Button } from '@/components/ui/Button'

interface VaultGridProps {
  vaultData?: VaultProduct[];
  showStats?: boolean;
  allowFiltering?: boolean;
  defaultView?: 'grid' | 'list';
}

export const VaultGrid: React.FC<VaultGridProps> = ({
  vaultData,
  showStats = true,
  allowFiltering = true,
  defaultView = 'grid'
}) => {
  const [products, setProducts] = useState<VaultProduct[]>([])
  const [filteredProducts, setFilteredProducts] = useState<VaultProduct[]>([])
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedTier, setSelectedTier] = useState<string>('all')
  const [selectedCategory, setSelectedCategory] = useState<string>('all')
  const [viewMode, setViewMode] = useState<'grid' | 'list'>(defaultView)
  const [loading, setLoading] = useState(true)

  // Load vault data
  useEffect(() => {
    const loadVaultData = async () => {
      try {
        if (vaultData) {
          setProducts(vaultData)
        } else {
          // Try to load from the generated JSON file
          const response = await fetch('/vault-content/vault-tiles.json')
          if (response.ok) {
            const data = await response.json()
            setProducts(data)
          } else {
            console.warn('Could not load vault data from vault-tiles.json')
            setProducts([])
          }
        }
      } catch (error) {
        console.error('Error loading vault data:', error)
        setProducts([])
      } finally {
        setLoading(false)
      }
    }

    loadVaultData()
  }, [vaultData])

  // Apply filters
  useEffect(() => {
    let filtered = products

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(product =>
        product.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.category.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    // Tier filter
    if (selectedTier !== 'all') {
      filtered = filtered.filter(product => product.tier.toLowerCase() === selectedTier)
    }

    // Category filter
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(product => product.category === selectedCategory)
    }

    setFilteredProducts(filtered)
  }, [products, searchTerm, selectedTier, selectedCategory])

  // Get unique tiers and categories
  const tiers = Array.from(new Set(products.map(p => p.tier.toLowerCase())))
  const categories = Array.from(new Set(products.map(p => p.category)))

  // Calculate stats
  const stats = {
    total: products.length,
    free: products.filter(p => p.tier.toLowerCase() === 'freebies').length,
    premium: products.filter(p => p.tier.toLowerCase() !== 'freebies').length,
    newItems: products.filter(p => p.autoGenerated).length
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Stats Section */}
      {showStats && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <Card>
            <CardContent className="text-center py-4">
              <div className="text-2xl font-bold text-blue-600">{stats.total}</div>
              <div className="text-sm text-gray-600">Total Items</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="text-center py-4">
              <div className="text-2xl font-bold text-green-600">{stats.free}</div>
              <div className="text-sm text-gray-600">Free Resources</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="text-center py-4">
              <div className="text-2xl font-bold text-purple-600">{stats.premium}</div>
              <div className="text-sm text-gray-600">Premium Tools</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="text-center py-4">
              <div className="text-2xl font-bold text-orange-600">{stats.newItems}</div>
              <div className="text-sm text-gray-600">New This Week</div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Filters Section */}
      {allowFiltering && (
        <Card>
          <CardContent className="p-4">
            <div className="flex flex-col md:flex-row gap-4 items-center">
              {/* Search */}
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <input
                  type="text"
                  placeholder="Search vault..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              {/* Tier Filter */}
              <select
                value={selectedTier}
                onChange={(e) => setSelectedTier(e.target.value)}
                className="px-3 py-2 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">All Tiers</option>
                {tiers.map(tier => (
                  <option key={tier} value={tier}>
                    {tier.charAt(0).toUpperCase() + tier.slice(1)}
                  </option>
                ))}
              </select>

              {/* Category Filter */}
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="px-3 py-2 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">All Categories</option>
                {categories.map(category => (
                  <option key={category} value={category}>
                    {category}
                  </option>
                ))}
              </select>

              {/* View Toggle */}
              <div className="flex border border-gray-200 rounded-md">
                <Button
                  onClick={() => setViewMode('grid')}
                  variant={viewMode === 'grid' ? 'default' : 'ghost'}
                  size="sm"
                  className="rounded-r-none"
                >
                  <Grid className="w-4 h-4" />
                </Button>
                <Button
                  onClick={() => setViewMode('list')}
                  variant={viewMode === 'list' ? 'default' : 'ghost'}
                  size="sm"
                  className="rounded-l-none"
                >
                  <List className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Results Count */}
      <div className="text-sm text-gray-600">
        Showing {filteredProducts.length} of {products.length} items
        {searchTerm && ` for "${searchTerm}"`}
      </div>

      {/* Products Grid/List */}
      {filteredProducts.length === 0 ? (
        <Card>
          <CardContent className="text-center py-12">
            <p className="text-gray-500">No products found matching your criteria.</p>
            <Button 
              onClick={() => {
                setSearchTerm('')
                setSelectedTier('all')
                setSelectedCategory('all')
              }}
              variant="outline"
              className="mt-4"
            >
              Clear Filters
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className={
          viewMode === 'grid' 
            ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
            : "space-y-4"
        }>
          {filteredProducts.map((product) => (
            <VaultTileV2
              key={product.id}
              product={product}
              showPreview={true}
            />
          ))}
        </div>
      )}
    </div>
  )
}

// src/hooks/useVaultAutomation.ts - React Hook for Automation
import { useState, useEffect } from 'react'

interface AutomationStatus {
  isRunning: boolean;
  lastRun: Date | null;
  stats: {
    totalItems: number;
    newItems: number;
    errors: string[];
  } | null;
}

export const useVaultAutomation = () => {
  const [status, setStatus] = useState<AutomationStatus>({
    isRunning: false,
    lastRun: null,
    stats: null
  })

  const runAutomation = async (options: {
    moveFiles?: boolean;
    generatePages?: boolean;
    updateTiers?: boolean;
  } = {}) => {
    setStatus(prev => ({ ...prev, isRunning: true }))
    
    try {
      // In a real implementation, this would call your backend API
      // that runs the vault automation script
      const response = await fetch('/api/vault/automation', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(options)
      })
      
      if (!response.ok) {
        throw new Error('Automation failed')
      }
      
      const result = await response.json()
      
      setStatus({
        isRunning: false,
        lastRun: new Date(),
        stats: result.stats
      })
      
      return result
    } catch (error) {
      setStatus(prev => ({
        ...prev,
        isRunning: false,
        stats: {
          totalItems: 0,
          newItems: 0,
          errors: [error.message]
        }
      }))
      throw error
    }
  }

  return {
    status,
    runAutomation
  }
}

// src/pages/VaultAdmin.tsx - Admin Interface for Vault Management
import React from 'react'
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/Card'
import { Button } from '@/components/ui/Button'
import { useVaultAutomation } from '@/hooks/useVaultAutomation'
import { Play, RefreshCw, Settings, Download, Eye } from 'lucide-react'

export const VaultAdmin: React.FC = () => {
  const { status, runAutomation } = useVaultAutomation()

  const handleRunAutomation = async (type: string) => {
    const options = {
      moveFiles: type === 'full' || type === 'move',
      generatePages: type === 'full' || type === 'pages',
      updateTiers: type === 'refresh'
    }

    try {
      await runAutomation(options)
      alert('Automation completed successfully!')
    } catch (error) {
      alert('Automation failed: ' + error.message)
    }
  }

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          Vault Administration
        </h1>
        <p className="text-gray-600">
          Manage your vault content automation and settings
        </p>
      </div>

      {/* Automation Controls */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Settings className="w-5 h-5" />
            <span>Automation Controls</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Button
              onClick={() => handleRunAutomation('scan')}
              disabled={status.isRunning}
              className="flex items-center space-x-2"
            >
              <Eye className="w-4 h-4" />
              <span>Scan Only</span>
            </Button>

            <Button
              onClick={() => handleRunAutomation('pages')}
              disabled={status.isRunning}
              className="flex items-center space-x-2"
            >
              <Download className="w-4 h-4" />
              <span>Generate Pages</span>
            </Button>

            <Button
              onClick={() => handleRunAutomation('move')}
              disabled={status.isRunning}
              className="flex items-center space-x-2"
            >
              <RefreshCw className="w-4 h-4" />
              <span>Move Files</span>
            </Button>

            <Button
              onClick={() => handleRunAutomation('full')}
              disabled={status.isRunning}
              className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700"
            >
              <Play className="w-4 h-4" />
              <span>Full Automation</span>
            </Button>
          </div>

          {status.isRunning && (
            <div className="flex items-center space-x-2 text-blue-600">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
              <span>Running automation...</span>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Status and Stats */}
      {status.stats && (
        <Card>
          <CardHeader>
            <CardTitle>Last Run Results</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{status.stats.totalItems}</div>
                <div className="text-sm text-gray-600">Total Items</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{status.stats.newItems}</div>
                <div className="text-sm text-gray-600">New Items</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-red-600">{status.stats.errors.length}</div>
                <div className="text-sm text-gray-600">Errors</div>
              </div>
            </div>

            {status.lastRun && (
              <p className="text-sm text-gray-500 mt-4">
                Last run: {status.lastRun.toLocaleString()}
              </p>
            )}

            {status.stats.errors.length > 0 && (
              <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-md">
                <h4 className="font-medium text-red-800 mb-2">Errors:</h4>
                <ul className="text-sm text-red-700 space-y-1">
                  {status.stats.errors.map((error, index) => (
                    <li key={index}>‚Ä¢ {error}</li>
                  ))}
                </ul>
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  )
}